#!/usr/bin/env perl

# Copyright 2015 Mike Mestnik
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use common::sense;
no re 'eval';

use Proc::ProcessTable;
use Nagios::Plugin;

my $np = Nagios::Plugin->new(
    shortname => 'PSTIME',
    usage     => <<EOF
    Using Proc::ProcessTable with native kernel scraping collect process time.
Usage: %s [ -C|--cmndline=<regex match> ] [ -c|--critical=<threshold> ] [ -w|--warning=<threshold> ]

Currently threasholds against sum of time and ctime.
EOF
);

$np->add_arg(
    spec => 'warning|w=s',
    help => '-w, --warning=INTEGER'
);

$np->add_arg(
    spec => 'critical|c=s',
    help => '-c, --critical=INTEGER'
);

$np->add_arg(
    spec => 'cmndline|C=s',
    help => '-C, --cmndline=REGEX'
);

$np->getopts;

$np->set_thresholds(
    warning  => $np->opts->warning,
    critical => $np->opts->critical,
);

my @targets = ();
my $re      = $np->opts->cmndline;
my ( $t, $ct ) = ( 0, 0 );
foreach ( @{ ( new Proc::ProcessTable( 'enable_ttys' => 0 ) )->table } ) {
    next if ( $np->opts->cmndline && $_->cmndline !~ /$re/ );
    next if ( $_->pid == $$ );
    $t  += $_->time;
    $ct += $_->ctime;
}

$np->add_perfdata(
    label => 'time',
    value => $t,
    uom   => 'c',
);

$np->add_perfdata(
    label => 'ctime',
    value => $ct,
    uom   => 'c',
);

$np->add_perfdata(
    label     => 'ttime',
    value     => $t + $ct,
    uom       => 'c',
    threshold => $np->threshold(),
);

$np->nagios_exit( $np->check_threshold( $t + $ct ),
    "Time: $t CTime: $ct Sum: " . ( $t + $ct ) );

1;
